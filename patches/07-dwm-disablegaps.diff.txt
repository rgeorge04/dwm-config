diff --git a/config.def.h b/config.def.h
index 7365cb5..631e3e5 100644
--- a/config.def.h
+++ b/config.def.h
@@ -28,9 +28,9 @@ static const Rule rules[] = {
 	 *	WM_CLASS(STRING) = instance, class
 	 *	WM_NAME(STRING) = title
 	 */
-	/* class      instance    title       tags mask     isfloating   monitor */
-	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
-	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
+	/* class      instance    title       tags mask     isfloating   disable_gaps	monitor */
+	{ "Gimp",     NULL,       NULL,       0,            1,           0,		-1 },
+	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           0,		-1 },
 };
 
 /* layout(s) */
diff --git a/dwm.c b/dwm.c
index 34490eb..be5fd62 100644
--- a/dwm.c
+++ b/dwm.c
@@ -95,7 +95,7 @@ struct Client {
 	int basew, baseh, incw, inch, maxw, maxh, minw, minh;
 	int bw, oldbw;
 	unsigned int tags;
-	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;
+	int disablegaps, isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;
 	Client *next;
 	Client *snext;
 	Monitor *mon;
@@ -124,6 +124,8 @@ struct Monitor {
 	int wx, wy, ww, wh;   /* window area  */
 	int gappx;	      /* gaps between windows */
 	int drawwithgaps;     /* toggle gaps */
+	int oldgapsstate;
+	int disablegaps;
 	unsigned int seltags;
 	unsigned int sellt;
 	unsigned int tagset[2];
@@ -143,6 +145,7 @@ typedef struct {
 	const char *title;
 	unsigned int tags;
 	int isfloating;
+	int disablegaps;
 	int monitor;
 } Rule;
 
@@ -294,6 +297,7 @@ applyrules(Client *c)
 	/* rule matching */
 	c->isfloating = 0;
 	c->tags = 0;
+	c->disablegaps = 0;
 	XGetClassHint(dpy, c->win, &ch);
 	class    = ch.res_class ? ch.res_class : broken;
 	instance = ch.res_name  ? ch.res_name  : broken;
@@ -309,6 +313,12 @@ applyrules(Client *c)
 			for (m = mons; m && m->num != r->monitor; m = m->next);
 			if (m)
 				c->mon = m;
+			c->disablegaps = r->disablegaps;
+			if (c->disablegaps && !c->mon->disablegaps) {
+				c->mon->disablegaps = 1;
+				c->mon->oldgapsstate = c->mon->drawwithgaps;
+				c->mon->drawwithgaps = 0;
+			}
 		}
 	}
 	if (ch.res_class)
@@ -647,6 +657,8 @@ createmon(void)
 	m->topbar = topbar;
 	m->gappx = gappx;
 	m->drawwithgaps = startwithgaps;
+	m->oldgapsstate = 0;
+	m->disablegaps = 0;
 	m->lt[0] = &layouts[0];
 	m->lt[1] = &layouts[1 % LENGTH(layouts)];
 	strncpy(m->ltsymbol, layouts[0].symbol, sizeof m->ltsymbol);
@@ -1530,7 +1542,7 @@ setgaps(const Arg *arg)
 	switch(arg->i)
 	{
 		case GAP_TOGGLE:
-			selmon->drawwithgaps = !selmon->drawwithgaps;
+			selmon->drawwithgaps = selmon->oldgapsstate = !selmon->drawwithgaps;
 			break;
 		case GAP_RESET:
 			selmon->gappx = gappx;
@@ -1832,6 +1844,17 @@ unmanage(Client *c, int destroyed)
 {
 	Monitor *m = c->mon;
 	XWindowChanges wc;
+	Client *check;
+	int restore_gaps = 1;
+
+	for (check = nexttiled(m->clients); check; check = nexttiled(check->next)) {
+		if (check != c && check->disablegaps)
+			restore_gaps = 0;
+	}
+	if (restore_gaps && m->disablegaps) {
+		m->drawwithgaps = m->oldgapsstate;
+		m->disablegaps = 0;
+	}
 
 	detach(c);
 	detachstack(c);
